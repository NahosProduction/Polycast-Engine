Write-Host "üöÄ POLYCAST ENGINE BUILD SYSTEM COMPLET" -ForegroundColor Cyan
Write-Host "==================================" -ForegroundColor Cyan

# Configuration adapt√©e √† votre structure
$compiler = "mingw64\bin\gcc.exe"
$windres = "mingw64\bin\windres.exe"
$buildDir = "build"
$srcDir = "src"
$editorDir = "editor"
$assetsDirs = @("build/textures", "build/maps")


# V√©rifications initiales
function Test-Environment {
    Write-Host "üîç V√©rification de l'environnement..." -ForegroundColor Yellow
    
    $issues = @()
    
    if (-not (Test-Path $compiler)) {
        $issues += "‚ùå Compilateur non trouv√©: $compiler"
    } else {
        Write-Host "‚úÖ Compilateur trouv√©" -ForegroundColor Green
    }
    
    if (-not (Test-Path "libs\SDL2\lib\libSDL2.a")) {
        $issues += "‚ùå Biblioth√®ques SDL2 non trouv√©es"
    } else {
        Write-Host "‚úÖ Biblioth√®ques SDL2 trouv√©es" -ForegroundColor Green
    }
    
    if (-not (Test-Path "$srcDir\main.c")) {
        $issues += "‚ùå Fichiers source non trouv√©s"
    } else {
        Write-Host "‚úÖ Fichiers source trouv√©s" -ForegroundColor Green
    }
    
    if ($issues.Count -gt 0) {
        Write-Host "`nProbl√®mes d√©tect√©s:" -ForegroundColor Red
        $issues | ForEach-Object { Write-Host $_ -ForegroundColor Red }
        return $false
    }
    
    Write-Host "‚úÖ Environnement OK" -ForegroundColor Green
    return $true
}

# Cr√©ation des dossiers
function New-BuildDirectories {
    if (-not (Test-Path $buildDir)) {
        New-Item -ItemType Directory -Path $buildDir | Out-Null
    }
}

# Compilation du moteur
function Build-Engine {
    Write-Host "üî® Compilation du moteur..." -ForegroundColor Yellow
    
    New-BuildDirectories
    
    $args = @(
        "-mconsole", "-fdiagnostics-color=always", "-g",
        "-I$PWD\libs\SDL2\include",
        "-I$PWD\libs\SDL2\include\SDL2", 
        "-I$PWD\libs\SDL2_image\include",
        "-I$PWD\libs\SDL2_image\include\SDL2",
        "-L$PWD\libs\SDL2\lib",
        "-L$PWD\libs\SDL2_image\lib",
        "$srcDir\main.c",
        "$srcDir\engine.c", 
        "$srcDir\input.c",
        "$srcDir\raycaster.c",
        "$srcDir\player.c",
        "$srcDir\textures.c", 
        "$srcDir\map.c",
        "$srcDir\map_loader.c",
        "$editorDir\lighting.c",
        "-o", "$buildDir\engine.exe",
        "-lSDL2main", "-lSDL2", "-lSDL2_image",
        "-lgdi32", "-lshell32", "-lshlwapi", "-lcomctl32",
        "-lsetupapi", "-limm32", "-lole32", "-loleaut32", "-lversion", "-luuid", "-lwinmm", "-ldxguid"

    )

    
    & $compiler $args
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Compilation r√©ussie!" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚ùå Erreur de compilation!" -ForegroundColor Red
        return $false
    }
}

# Compilation de l'√©diteur
function Build-Editor {
    Write-Host "üé® Compilation de l'√©diteur..." -ForegroundColor Yellow
    
    if (-not (Test-Path "$editorDir\map_editor.c")) {
        Write-Host "‚ùå √âditeur source non trouv√©" -ForegroundColor Red
        return $false
    }
    
    $args = @(
        "-mconsole", "-fdiagnostics-color=always", "-g",
        "-I$PWD\libs\SDL2\include",
        "-I$PWD\libs\SDL2\include\SDL2", 
        "-I$PWD\libs\SDL2_image\include",
        "-I$PWD\libs\SDL2_image\include\SDL2",
        "-L$PWD\libs\SDL2\lib",
        "-L$PWD\libs\SDL2_image\lib",
        "$editorDir\map_editor.c",
        "$editorDir\lighting.c",
        "-o", "$buildDir\map_editor.exe",
        "-lSDL2main", "-lSDL2", "-lSDL2_image",
        "-lgdi32", "-lshell32", "-lshlwapi", "-lcomctl32",
        "-lsetupapi", "-limm32", "-lole32", "-loleaut32", "-lversion", "-luuid", "-lwinmm", "-ldxguid"
    )
    
    & $compiler $args
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ √âditeur compil√©!" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚ùå Erreur compilation √©diteur!" -ForegroundColor Red
        return $false
    }
}

# Build Windows avec ic√¥ne
function Build-WindowsPackage {
    Write-Host "üì¶ Cr√©ation du package Windows..." -ForegroundColor Yellow
    
    $windowsDir = "$buildDir\windows"
    if (Test-Path $windowsDir) {
        Remove-Item $windowsDir -Recurse -Force
    }
    New-Item -ItemType Directory -Path $windowsDir | Out-Null
    
    # Cr√©er dossier resources si n√©cessaire
    if (-not (Test-Path "resources")) {
        New-Item -ItemType Directory -Path "resources" | Out-Null
    }
    
    # Gestion de l'ic√¥ne
    $useIcon = $false
    $resourceFile = ""
    
    if (Test-Path "icon.ico") {
        Write-Host "üé® Cr√©ation des ressources avec ic√¥ne..." -ForegroundColor Yellow
        
        # Copier l'ic√¥ne dans resources
        Copy-Item "icon.ico" "resources\"
        
        # Cr√©er le fichier RC
        $rcContent = @"
#include <windows.h>

// Ic√¥ne principale
IDI_MAIN_ICON ICON "icon.ico"

// Informations de version
VS_VERSION_INFO VERSIONINFO
FILEVERSION 1,0,0,0
PRODUCTVERSION 1,0,0,0
FILEFLAGSMASK 0x3fL
FILEFLAGS 0x0L
FILEOS 0x40004L
FILETYPE 0x1L
FILESUBTYPE 0x0L
BEGIN
    BLOCK "StringFileInfo"
    BEGIN
        BLOCK "040904b0"
        BEGIN
            VALUE "CompanyName", "Nahos Production"
            VALUE "FileDescription", "Polycast Engine"
            VALUE "FileVersion", "1.0.0.0"
            VALUE "InternalName", "engine"
            VALUE "LegalCopyright", "¬© 2025 Nahos Production"
            VALUE "OriginalFilename", "engine.exe"
            VALUE "ProductName", "Polycast Engine"
            VALUE "ProductVersion", "1.0.0.0"
        END
    END
    BLOCK "VarFileInfo"
    BEGIN
        VALUE "Translation", 0x409, 1200
    END
END
"@
        
        $rcContent | Out-File "resources\game.rc" -Encoding ASCII
        
        # Compiler les ressources
        if (Test-Path $windres) {
            & $windres "resources\game.rc" "-O" "coff" "-o" "$windowsDir\game.res"
            if ($LASTEXITCODE -eq 0) {
                $useIcon = $true
                $resourceFile = "$windowsDir\game.res"
                Write-Host "‚úÖ Ressources avec ic√¥ne cr√©√©es" -ForegroundColor Green
            }
        }
    }
    
    # Compiler le moteur avec ic√¥ne
    Write-Host "üî® Compilation moteur Windows..." -ForegroundColor Yellow
    $args = @(
        "-mconsole", "-g", "-O2", "-static",
        "-I$PWD\libs\SDL2\include",
        "-I$PWD\libs\SDL2\include\SDL2", 
        "-I$PWD\libs\SDL2_image\include",
        "-I$PWD\libs\SDL2_image\include\SDL2",
        "-L$PWD\libs\SDL2\lib",
        "-L$PWD\libs\SDL2_image\lib",
        "$srcDir\main.c",
        "$srcDir\engine.c", 
        "$srcDir\input.c",
        "$srcDir\raycaster.c",
        "$srcDir\player.c",
        "$srcDir\textures.c", 
        "$srcDir\map.c",
        "$srcDir\map_loader.c",
        "$editorDir\lighting.c"
    )
    
    if ($useIcon) {
        $args += $resourceFile
    }
    
    $args += @(
        "-o", "$windowsDir\engine.exe",
        "-lSDL2main", "-lSDL2", "-lSDL2_image",
        "-lgdi32", "-lshell32", "-lshlwapi", "-lcomctl32",
        "-lsetupapi", "-limm32", "-lole32", "-loleaut32", "-lversion", "-luuid", "-lwinmm", "-ldxguid"
    )
    
    & $compiler $args
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erreur compilation moteur Windows" -ForegroundColor Red
        return $false
    }
    
    # Compiler l'√©diteur avec ic√¥ne
    if (Test-Path "$editorDir\map_editor_with_lights.c") {
        Write-Host "üé® Compilation √©diteur Windows..." -ForegroundColor Yellow
        $editorArgs = @(
            "-mconsole", "-g", "-O2", "-static",
            "-I$PWD\libs\SDL2\include",
            "-I$PWD\libs\SDL2\include\SDL2", 
            "-I$PWD\libs\SDL2_image\include",
            "-I$PWD\libs\SDL2_image\include\SDL2",
            "-L$PWD\libs\SDL2\lib",
            "-L$PWD\libs\SDL2_image\lib",
            "$editorDir\map_editor_with_lights.c",
            "$editorDir\lighting.c"
        )
        
        if ($useIcon) {
            $editorArgs += $resourceFile
        }
        
        $editorArgs += @(
            "-o", "$windowsDir\map_editor.exe",
            "-lSDL2main", "-lSDL2", "-lSDL2_image",
            "-lgdi32", "-lshell32", "-lshlwapi", "-lcomctl32"
        )
        
        & $compiler $editorArgs
    }
    
    # Copier les DLL SDL
    Write-Host "üìö Copie des biblioth√®ques..." -ForegroundColor Yellow
    if (Test-Path "libs\SDL2\lib\SDL2.dll") {
        Copy-Item "libs\SDL2\lib\SDL2.dll" $windowsDir
    }
    if (Test-Path "libs\SDL2_image\lib\SDL2_image.dll") {
        Copy-Item "libs\SDL2_image\lib\SDL2_image.dll" $windowsDir
    }
        
    # Copier les assets
    foreach ($dir in $assetsDirs) {
        if (Test-Path $dir) {
            Copy-Item $dir $windowsDir -Recurse -Force
            Write-Host "üé® Assets copi√©s depuis $dir" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è Dossier $dir introuvable" -ForegroundColor Yellow
        }
    }

    # Cr√©er le lanceur
    $launcherContent = @"
@echo off
echo POLYCAST ENGINE
echo ========================
echo.
echo Choisissez:
echo 1. Lancer le jeu
echo 2. Lancer l'editeur de map
echo 3. Quitter
echo.
set /p choice="Votre choix (1-3): "

if "%choice%"=="1" (
    start engine.exe
) else if "%choice%"=="2" (
    start map_editor.exe
) else if "%choice%"=="3" (
    exit
) else (
    echo Choix invalide!
    pause
    goto :eof
)
"@
    
    $launcherContent | Out-File "$windowsDir\launch.bat" -Encoding ASCII
    
    # Cr√©er le README
    $readmeContent = @"
POLYCAST ENGINE v1.0
=============================

CONTENU DU PACKAGE:
- engine.exe        : Le moteur de jeu
- map_editor.exe    : L'√©diteur de niveau
- textures/         : Dossier des textures
- maps/             : Dossier des maps
- launch.bat        : Lanceur simplifi√©

UTILISATION:
1. Double-cliquez sur launch.bat
2. Ou lancez directement engine.exe

CONTR√îLES JEU:
- WASD : Mouvement
- Q/E : Mouvement lat√©ral
- O : Toggle √©clairage
- L : Charger niveau
- ESC : Quitter

√âDITEUR:
- TAB : Changer de mode
- S : Sauvegarder
- N : Nouvelle map

Support: nahosproduction@gmail.com
"@
    
    $readmeContent | Out-File "$windowsDir\README.txt" -Encoding UTF8
    
    Write-Host "‚úÖ Package Windows cr√©√© dans $windowsDir" -ForegroundColor Green
    if ($useIcon) {
        Write-Host "üé® Avec ic√¥ne int√©gr√©e!" -ForegroundColor Green
    }
    
    return $true
}


# Menu principal
do {
    Write-Host ""
    Write-Host "Choisissez une option:" -ForegroundColor White
    Write-Host "1. Test environnement" -ForegroundColor White
    Write-Host "2. Compiler le moteur" -ForegroundColor White
    Write-Host "3. Compiler et lancer" -ForegroundColor White
    Write-Host "4. Compiler √©diteur" -ForegroundColor White  
    Write-Host "5. Build package Windows (avec ic√¥ne)" -ForegroundColor White
    Write-Host "6. Nettoyer" -ForegroundColor White
    Write-Host "7. Quitter" -ForegroundColor White
    
    $choice = Read-Host "Votre choix (1-7)"
    
    switch ($choice) {
        "1" { 
            Test-Environment | Out-Null
        }
        "2" { 
            Build-Engine | Out-Null
        }
        "3" { 
            if (Build-Engine) {
                Write-Host "üéÆ Lancement du jeu..." -ForegroundColor Cyan
                Set-Location $buildDir
                & ".\engine.exe"
                Set-Location ..
            }
        }
        "4" {
            Build-Editor | Out-Null
        }
        "5" {
            Build-WindowsPackage | Out-Null
        }
        "6" {
            Write-Host "üßπ Nettoyage..." -ForegroundColor Yellow
            if (Test-Path "$buildDir\engine.exe") { Remove-Item "$buildDir\engine.exe" }
            if (Test-Path "$buildDir\map_editor.exe") { Remove-Item "$buildDir\map_editor.exe" }
            if (Test-Path "$buildDir\windows") { Remove-Item "$buildDir\windows" -Recurse -Force }
            if (Test-Path "$buildDir\web") { Remove-Item "$buildDir\web" -Recurse -Force }
            if (Test-Path "resources") { Remove-Item "resources" -Recurse -Force }
            Write-Host "‚úÖ Nettoyage termin√©!" -ForegroundColor Green
        }
        "7" { 
            Write-Host "Au revoir!" -ForegroundColor Cyan
            exit 
        }
        default { 
            Write-Host "Choix invalide!" -ForegroundColor Red 
        }
    }
} while ($choice -ne "7")